#!/usr/bin/env bash
# Usage: script/build [-o <BIN>]
#        script/build files

set -e

windows=
[[ $OS == Windows* ]] && windows=1

<<<<<<< HEAD:shared/scripts/build
setup_gopath() {
  TMPDIR="${LOCALAPPDATA:-$TMPDIR}"
  TMPDIR=${TMPDIR:-/tmp}
  TMP_GOPATH="${TMPDIR%/}/go"
  TMP_SELF="${TMP_GOPATH}/src/github.com/sniperkit/hub/pkg"

  if [ -n "$windows" ]; then
    export GOPATH="${TMP_GOPATH//\//\\}"
  else
    export GOPATH="$TMP_GOPATH"
  fi

  mkdir -p "${TMP_SELF%/*}"
  ln -snf "$PWD" "$TMP_SELF" 2>/dev/null || {
    rm -rf "$TMP_SELF"
    mkdir "$TMP_SELF"
    cp -R "$PWD"/* "${TMP_SELF}/"
  }
}

=======
>>>>>>> 4c6d4dfd7d2294d146ea1870d85129018ec23017:script/build
find_source_files() {
  find . -maxdepth 2 -name '*.go' '!' -name '*_test.go' "$@"
}

<<<<<<< HEAD:shared/scripts/build
find_packages() {
  find_source_files | cut -d/ -f2 | sort -u | grep -v '.go$' | sed 's!^!github.com/sniperkit/hub/pkg/!'
}

check_go_version() {
  local version="$(go version)"
  local minor="$(grep -o 'go1.[[:digit:]]\+' <<<"$version" | head -1)"
  [ -z "$version" ] || echo "$version"
  if [[ -z "$version" || -n "$minor" && "${minor##*.}" -lt 8 ]]; then
    echo "You need to install Go 1.8 or higher to build hub" >&2
    return 1
  fi
}

=======
>>>>>>> 4c6d4dfd7d2294d146ea1870d85129018ec23017:script/build
build_hub() {
  mkdir -p "$(dirname "$1")"
  go build -ldflags "-X github.com/sniperkit/hub/pkg/version.Version=`./script/version`" -o "$1"
}

[ $# -gt 0 ] || set -- -o "bin/hub${windows:+.exe}"

case "$1" in
-o )
  build_hub "${2?}"
  ;;
files )
  find_source_files
  ;;
-h | --help )
  sed -ne '/^#/!q;s/.\{1,2\}//;1d;p' < "$0"
  exit
  ;;
* )
  "$0" --help >&2
  exit 1
esac
